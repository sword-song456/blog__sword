[{"title":"CSS动画基础","url":"/2021/04/24/CSS%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/","content":"<p>华丽的视觉体验源自于艺术家的精心雕琢</p>\n<span id=\"more\"></span>\n\n<p></style></p>\n<div class=\"demo-1\">\n        <div class=\"circle\">\n            <div class=\"word\"><p>简 单 动 画</p></div>\n        </div>\n    </div>\n<style>\n.demo-1 .circle {\n  width: 200px;\n  height: 200px;\n  background: #FFFF99;\n  margin: 0 auto;\n  border-radius: 50%;\n  position: relative;\n  animation: jump 1.5s cubic-bezier(0.41, -0.04, 0.93, 0.29)  infinite alternate;\n}\n@keyframes jump {\n  0% {\n    transform: translateX(0px);\n  }\n  40% {\n    transform: translateX(150px);\n    clip-path: ellipse(50% 50% at 50% 50%);\n  }\n  50% {\n    transform: translateX(150px);\n    clip-path: ellipse(46% 50% at 46% 50%);\n  }\n  90% {\n    transform: translateX(0px);\n    clip-path: ellipse(50% 50% at 50% 50%);\n  }\n  100% {\n    transform: translateX(0px);\n    clip-path: ellipse(80% 50% at 80% 50%);\n  }\n}\n.demo-1 .circle .word {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #CC9999;\n  border-radius: 30%;\n  height:30px;\n}\n.demo-1 .circle .word p {\n  color: #666699;\n}\n</style>\n<div id=\"catalog\">索引</div>\n<style>\n#catalog{\n            color: #1CA28A;\n            font-size: 30px;\n            font-weight: bold;\n            width: 60px;\n            height: 40px;\n            animation: bigger 2s ease-in 0.5s  infinite alternate;\n            font-family:\"微软雅黑\",\"黑体\",\"宋体\";\n        margin-left：50px;\n        } \n        @keyframes bigger {\n            0%{\n                transform:scale(0.7);\n            }\n            50%{\n                transform:scale(0.9);\n            }\n            100%{\n                transform:scale(1.2);\n            }\n        }\n</style>\n\n<style>\n        #side-menu {\n            list-style: none;\n            border: 3px solid #1CA28A    ;\n            border-radius: 10px;\n            width: 300px;\n            padding: 20px;\n            background: #88AE5C;\n        margin:0 auto;\n        margin-bottom: 50px;\n        }\n\n        #side-menu li {\n            font-size: 18px;\n            line-height: 2.4em;\n            border-bottom: dotted 1px grey ;\n            /* 添加分隔符 */\n        }\n        #side-menu span{\n            font-weight: bolder;\n            color: khaki;\n        } \n        #side-menu li:last-child {\n            border: none;\n            /* 取消最后一个分隔符 */\n        }\n        #side-menu li a {\n            color: #EFD735    ;\n            text-decoration: none;\n        }\n        #side-menu li a:hover {\n            color: rgb(255, 100, 200);\n        }\n</style>\n<ul id='side-menu'>\n    <li><a href=\"#download\"><span>①</span> 介绍</a></li>\n    <li><a href=\"#unzip\"><span>②</span> Transition 基础写法和经验</a></li>\n    <li><a href=\"#settings\"><span>③</span> animation 写法和经验总结</a></li>\n    <li><a href=\"#compile\"><span>④</span> 时间函数</a></li>\n</ul>\n\n\n<div style=\"width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;\" id=\"download\"><strong><span>①</span> 介绍</a></strong></div>\n\n\n<ul>\n<li>css3动画包括 <strong>transtion</strong> 和 <strong>animation</strong>   </li>\n<li></li>\n<li>动画常和<strong>transform属性</strong>常用</li>\n<li></li>\n<li>transform并不是动画属性</li>\n</ul>\n<div style=\"width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;\" id=\"unzip\"><strong><span>②</span> Transition 基础写法和经验</a></strong></div>\n\n<p><strong>过渡</strong></p>\n<p><strong>基础写法</strong>  ：  属性名称   过渡时间   时间函数   延迟时间    （顺序 书写规范）</p>\n<p><strong>用法注意</strong>： </p>\n<ul>\n<li>①属性有变化的时候才会过渡   </li>\n<li>②初始化后再应用   </li>\n<li>③时间函数改变动画速度</li>\n</ul>\n<p>tip： </p>\n<ul>\n<li>1.display 不能和transition一起使用  （文档流限制）</li>\n<li></li>\n<li>2.transition 尽量不用all</li>\n<li></li>\n<li>3.常见的闪动   我们可以  perspective  和 backface-visibility</li>\n<li></li>\n<li>4.详见时间函数 <a href=\"https://blog.csdn.net/zhy13087344578/article/details/79651857\">时间函数</a></li>\n</ul>\n<p><strong>拓展：</strong></p>\n<p><strong>transform属性</strong>：<a href=\"https://www.w3school.com.cn/cssref/pr_transform.asp\">教程</a></p>\n<p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行<strong>旋转、缩放、移动或倾斜</strong>。</p>\n<p>常见属性</p>\n<ul>\n<li><strong>translate</strong>  translateX translateY   x轴 y轴 定向移动    单位：百分比或者px</li>\n<li></li>\n<li><strong>scaleX（x，y）</strong>  缩放比例  填倍数</li>\n<li></li>\n<li><strong>rotate(<em>angle</em>)</strong>   旋转角度   rotate(60deg)</li>\n<li></li>\n<li><strong>skew（angle）</strong>  倾斜角度</li>\n</ul>\n<div style=\"width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;\" id=\"settings\"><strong><span>③</span> animation 写法和经验总结</a></strong></div>\n\n<p><strong>组建动画</strong></p>\n<p><strong>基础写法</strong>：<a href=\"https://www.w3school.com.cn/cssref/pr_animation.asp\">教程</a></p>\n<p> 动画名称（name）--@keyframe    过渡时间     时间函数   延迟时间</p>\n<p>播放次数   播放方向   停止播放   是否暂停</p>\n<p>tip：</p>\n<ul>\n<li>1.animation 解决了transtion display：none  的BUG   （手动添加）</li>\n<li></li>\n<li>2.可实现跳动  根据百分比切换</li>\n</ul>\n<div style=\"width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;\" id=\"compile\"><strong><span>④</span> 时间函数</a></strong></div>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/zhy13087344578/article/details/79651857\">时间函数</a></li>\n<li></li>\n<li>线性 ：cubic-bezier  实现动画的线性过渡</li>\n<li></li>\n<li>非线性：steps （1，start|end）  实现动画的阶跃变化</li>\n</ul>\n<p><strong>简单应用：</strong></p>\n<p>loading：<br><img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/f22d4de2-0638-47c1-8d21-4e4beacb6e12.png\" alt=\"image.png\"></p>\n","categories":["CSS"],"tags":["动画"]},{"title":"JavaScript变量理解","url":"/2021/04/24/JavaScript%E5%8F%98%E9%87%8F%E7%90%86%E8%A7%A3/","content":"<p>基础不牢，地动山摇 , js变量的理解</p>\n<span id=\"more\"></span>\n\n<h1 id=\"JavaScript变量理解\"><a href=\"#JavaScript变量理解\" class=\"headerlink\" title=\"JavaScript变量理解\"></a>JavaScript变量理解</h1><p><strong>var&amp;&amp;let&amp;&amp;const</strong></p>\n<p>ECMAScript变量是<strong>松散类型</strong>的，也就意味这，变量可以保存任何类型的数据。每个变量只不过是一个用于<strong>保存任意值的命名占位符</strong></p>\n<hr>\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><ul>\n<li><p>声明作用域为函数</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function hh()&#123;</span><br><span class=\"line\">\tvar a = &#x27;hh&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hh();</span><br><span class=\"line\">console.log(a);   // 错误</span><br></pre></td></tr></table></figure></li>\n<li><p>var 声明提升</p>\n<p>  所谓提升，就是将声明拉到函数作用域的顶部 （只拉声明 ，不拉赋值）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function com()&#123;</span><br><span class=\"line\">\tconsole.log(a);</span><br><span class=\"line\">\tvar a = &#x27;hh&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">com()   // undefined 并未出现报错</span><br><span class=\"line\"></span><br><span class=\"line\">// 上述代码等于</span><br><span class=\"line\"></span><br><span class=\"line\">function com()&#123;</span><br><span class=\"line\">\tvar a;</span><br><span class=\"line\">\tconsole.log(a);</span><br><span class=\"line\">\ta = &#x27;hh&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li><p>块作用域  块 ===》 <code>&#123;&#125;</code></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if(true) &#123;</span><br><span class=\"line\">\tlet age = 26;</span><br><span class=\"line\">\tconsole.log(age);  // 26</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console,log(age);    // ReferenceError:26未定义</span><br></pre></td></tr></table></figure></li>\n<li><p>声明不会被提升</p>\n</li>\n<li><p>可全局声明 ，但不会成为window对象的属性（var）</p>\n</li>\n<li><p>不允许重复声明</p>\n</li>\n</ul>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li><p>与let相似 唯一一个重要的区别是<strong>声明变量时必须要初始化，且不允许修改</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const a ;  // 错误</span><br><span class=\"line\">cosnt a = 5 ; </span><br><span class=\"line\"></span><br><span class=\"line\">// const 也不允许重复声明</span><br><span class=\"line\">const name = &#x27;白小剑&#x27;</span><br><span class=\"line\">const name = &#x27;秦始皇&#x27; // SyntaxError</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生命风格以及最佳实践\"><a href=\"#生命风格以及最佳实践\" class=\"headerlink\" title=\"生命风格以及最佳实践\"></a>生命风格以及最佳实践</h3><ul>\n<li><p>不使用 <strong>var</strong></p>\n</li>\n<li><p><strong>const</strong> 优先 <strong>let</strong> 次之</p>\n<p>  使用<strong>const</strong> 可以使浏览器强制保持变量不变 ， 只在提前知道变量会修改时使用<strong>let</strong>来声明</p>\n</li>\n</ul>\n","categories":["JavaScript"],"tags":["JavaScript变量"]},{"title":"ES6模板字面量","url":"/2021/04/25/ES6%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/","content":"<p>ES6语法 模板字面量 ， 本文介绍了字面量的基本用法以及含义</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ES6-模板字面量\"><a href=\"#ES6-模板字面量\" class=\"headerlink\" title=\"ES6 模板字面量\"></a>ES6 模板字面量</h1><h3 id=\"1-基本含义\"><a href=\"#1-基本含义\" class=\"headerlink\" title=\"1. 基本含义\"></a>1. 基本含义</h3><ul>\n<li><p>保留换行字符，跨行定义字符串</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let hh = &#x27;我是\\n宋泽剑&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">let hh =  `我是</span><br><span class=\"line\">宋泽剑 `</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">我是</span><br><span class=\"line\">宋泽剑</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li><p>保持反引号内部的空格</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let hh =  `我是</span><br><span class=\"line\">\t\t\t宋泽剑 `</span><br><span class=\"line\">console.log(hh.length)   //47</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-支持字符串插值\"><a href=\"#2-支持字符串插值\" class=\"headerlink\" title=\"2.支持字符串插值\"></a>2.支持字符串插值</h3><ul>\n<li><p>插值表达式：<code>$&#123;&#125;</code> </p>\n</li>\n<li><p>可以放变量，还可以进行运算</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let value = 5</span><br><span class=\"line\"></span><br><span class=\"line\">let exponet = &#x27;second&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">let hh = `$&#123;value&#125; to the $&#123;exponet&#125; power is $&#123;value * value&#125;`;</span><br><span class=\"line\"></span><br><span class=\"line\">// 5 to the second power is 25  </span><br></pre></td></tr></table></figure></li>\n<li><p>可以插入函数和方法</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function hh(word)&#123;</span><br><span class=\"line\">\treturn`$&#123;word[0].toUpperCase&#125;$&#123;word.slice(1)&#125;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3-模板自面量标签函数\"><a href=\"#3-模板自面量标签函数\" class=\"headerlink\" title=\"3. 模板自面量标签函数\"></a>3. 模板自面量标签函数</h3><ul>\n<li><p>标签函数会接受被插值记号分隔后的模板和表达式求值的结果</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function simpleTag(strings, aValExpression, bValExpression, sumExpression) &#123; </span><br><span class=\"line\"> console.log(strings); </span><br><span class=\"line\"> console.log(aValExpression); </span><br><span class=\"line\"> console.log(bValExpression); </span><br><span class=\"line\"> console.log(sumExpression); </span><br><span class=\"line\"> return &#x27;foobar&#x27;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">let a = 6;</span><br><span class=\"line\">let b = 9;</span><br><span class=\"line\">let hh = simpleTag`$&#123;a&#125; + $&#123;b&#125; = $&#123;a+b&#125;`</span><br><span class=\"line\">// strings ==&gt; &quot;&quot;,&quot; + &quot;,&quot; + = &quot;,&quot;&quot; 分隔后的模板</span><br><span class=\"line\">// 6</span><br><span class=\"line\">// 9</span><br><span class=\"line\">// 15</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-原始字符串\"><a href=\"#4-原始字符串\" class=\"headerlink\" title=\"4.原始字符串\"></a>4.原始字符串</h3><ul>\n<li><p>获取原始内容</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(`\\u00A9`)   </span><br><span class=\"line\">//© </span><br></pre></td></tr></table></figure></li>\n<li><p>String.raw  字母含义</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(String.raw`\\u00A9`)</span><br><span class=\"line\">// \\u00A9</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","categories":["ES6"],"tags":["模板字面量"]},{"title":"变量、作用域与内存'","url":"/2021/05/04/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/","content":"<p>JavaScript 变量、作用域与内存</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、变量（松散类型，值和数据类型可以在生命周期中改变）\"><a href=\"#一、变量（松散类型，值和数据类型可以在生命周期中改变）\" class=\"headerlink\" title=\"一、变量（松散类型，值和数据类型可以在生命周期中改变）\"></a>一、变量（松散类型，值和数据类型可以在生命周期中改变）</h2><ul>\n<li><p> <strong>原始值</strong> <strong>引用值</strong></p>\n</li>\n<li><p> 原始值最简单的<strong>数据</strong> ，例如数据类型：Undefined  Null  Boolean  Number  String  Symbol </p>\n</li>\n<li><p> 引用值是多个值构成的<strong>对象</strong></p>\n</li>\n<li><p> 原始值是按<strong>值</strong>访问的，我们操作的就是存储在变量中的实际值</p>\n</li>\n<li><p> 引用值是按<strong>引用</strong>访问的，我们操作的也是引用</p>\n</li>\n<li><p>动态属性</p>\n<ul>\n<li><p>引用值可以随时添加修改和删除属性，原始值没有属性</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let name = &#x27;hh&#x27;;</span><br><span class=\"line\">name.sex = &#x27;girl&#x27;;</span><br><span class=\"line\">console.log(name.sex); // ==》 Undefined</span><br><span class=\"line\"></span><br><span class=\"line\">let name = new String(&#x27;hh&#x27;);</span><br><span class=\"line\">name.sex = &#x27;girl&#x27;;</span><br><span class=\"line\">console.log(name.sex) ; // ==》 girl</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>复制值</strong></p>\n<ol>\n<li><p>原始值复制值 ， 栈内存中增加了一个值</p>\n<p> <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210504143324.PNG\" alt=\"IMG_0040(20210504-142902)\"></p>\n</li>\n<li><p>引用值复制指针，堆内存中未增加值，增加了一个指针</p>\n<p> <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210504143344.PNG\" alt=\"IMG_0041(20210504-142917)\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>传参</strong></p>\n<ol>\n<li><p>按值传递参数时，值会复制到一个局部变量，局部变量的改变并不能引起原值的改变</p>\n</li>\n<li><p>传递对象时，函数内部和函数外部对象都指向同一个对象，因此要发生改变。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let sword = new String();</span><br><span class=\"line\">sword.name = &#x27;sss&#x27;;</span><br><span class=\"line\">function hh (nm) &#123;</span><br><span class=\"line\">    nm.name = &#x27;sword&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(sword);</span><br><span class=\"line\">hh(sword);</span><br><span class=\"line\">console.log(sword);</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210504160714.png\" alt=\"image-20210504160714907\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>确定类型</strong></p>\n<ol>\n<li><p> <code>typeof</code> 用来确定是什么类型的数据，对于原始值来说相对友好，对于引用值来说，只能返回对象</p>\n</li>\n<li><p>我们通常想要的是返回何种类型的对象，这是我们引入 <code>instanceof</code> </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log( colors instanceof Array);   ==》 true 数组对象 false 非</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"二、执行上下文与作用域\"><a href=\"#二、执行上下文与作用域\" class=\"headerlink\" title=\"二、执行上下文与作用域\"></a>二、执行上下文与作用域</h2><h4 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h4><ol>\n<li>上下文决定了变量和函数可以<strong>访问哪些数据</strong></li>\n<li>每个上下文都有一个<strong>变量对象</strong>，而这个上下文中定义的全部变量和函数都存在于这个变量中</li>\n<li>全局上下文是最外层的上下文 （定义的全局变量位于其中，联系到var 中的<strong>变量提升</strong>）</li>\n<li>上下文在其所有代码执行完之后才会被销毁，全局上下文最后才会被销毁，比如关闭网页</li>\n<li>上下文栈控制程序的执行流</li>\n</ol>\n<h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><ul>\n<li><p>决定了上下文的<strong>代码在访问函数或变量的顺序</strong> ， 全局上下文的变量对象始终是作用域链的最后一个变量对象（一直可以被找到，并且最后一个销毁）</p>\n</li>\n<li><p>代码在执行时，沿作用域链逐级搜索标识名称。顺序：从作用链的最前端搜索，逐级搜索（就近原则）</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210504164248.png\" alt=\"1E702811928957DBEE7CCCB804567863\"></p>\n<ul>\n<li>内部可以访问外部 但是外部不可以访问内部</li>\n</ul>\n</li>\n<li><p>作用域链增强 （在作用链前端临时添加一个上下文，代码执行后便删除）</p>\n<ul>\n<li>try / catch 语句</li>\n<li>with 语句</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><ul>\n<li>var <ul>\n<li>自动添加到最接近的上下文</li>\n<li>拿到函数或全局作用域的顶部（作用域链的尾部） ===》 变量提升</li>\n</ul>\n</li>\n<li>let<ul>\n<li>块级作用域</li>\n<li>同一作用域不能声明两次 声明后的变量，值可以改变</li>\n<li>由于“暂时性死区” ， （变量声明之前无法引用） ， let 也会被提升，不过跟var的变量提升有本质的不同</li>\n</ul>\n</li>\n<li>const<ul>\n<li>块级作用域</li>\n<li>不能重新赋值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、垃圾回收\"><a href=\"#三、垃圾回收\" class=\"headerlink\" title=\"三、垃圾回收\"></a>三、垃圾回收</h2><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>自动内存管理实现内存分配和闲置资源回收</li>\n<li>基本思路：周期性的确定哪个变量不会再使用，然后释放它的内存。</li>\n<li>常用办法：<strong>标记清理</strong> 、 引用计数 </li>\n</ul>\n<h4 id=\"标记清理\"><a href=\"#标记清理\" class=\"headerlink\" title=\"标记清理\"></a>标记清理</h4><ul>\n<li>标记内存中的所有变量</li>\n<li>去掉所有在上下文中的变量以及上下文引用的变量的标记</li>\n<li>剩下的就是不使用的变量 回收</li>\n</ul>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ul>\n<li>减少垃圾回收的次数</li>\n<li>动态改变垃圾回收的阈值</li>\n</ul>\n<h2 id=\"四、内存管理\"><a href=\"#四、内存管理\" class=\"headerlink\" title=\"四、内存管理\"></a>四、内存管理</h2><ul>\n<li>优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据</li>\n<li>数据不再使用，可以把他设置为 <code>null</code> ,释放引用。垃圾回收时会被回收</li>\n</ul>\n<h4 id=\"通过const-let-声明提升性能\"><a href=\"#通过const-let-声明提升性能\" class=\"headerlink\" title=\"通过const let 声明提升性能\"></a>通过const let 声明提升性能</h4><ul>\n<li>块作用域，可以更早的垃圾回收</li>\n</ul>\n<h4 id=\"隐藏类和删除操作\"><a href=\"#隐藏类和删除操作\" class=\"headerlink\" title=\"隐藏类和删除操作\"></a>隐藏类和删除操作</h4><h4 id=\"内存泄漏（闭包）\"><a href=\"#内存泄漏（闭包）\" class=\"headerlink\" title=\"内存泄漏（闭包）\"></a>内存泄漏（闭包）</h4><h4 id=\"静态分配与对象池\"><a href=\"#静态分配与对象池\" class=\"headerlink\" title=\"静态分配与对象池\"></a>静态分配与对象池</h4>","categories":["JavaScript"],"tags":["变量、作用域与内存"]},{"title":"ES6 symbol对象","url":"/2021/04/27/symbol%E5%AF%B9%E8%B1%A1/","content":"<p>ES6新增数据类型 Symbol（符号） 类型</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Symbol（符号）-类型\"><a href=\"#Symbol（符号）-类型\" class=\"headerlink\" title=\"Symbol（符号） 类型\"></a>Symbol（符号） 类型</h1><h3 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h3><ul>\n<li>确保对象属性的使用的<strong>唯一标识符</strong></li>\n<li>创建唯一记号，用作非字符串形式的对象属性</li>\n</ul>\n<h3 id=\"2-声明定义方式\"><a href=\"#2-声明定义方式\" class=\"headerlink\" title=\"2. 声明定义方式\"></a>2. 声明定义方式</h3><ul>\n<li><p>常规</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">let hh = Symbol(&#x27;你好&#x27;);</span><br><span class=\"line\">let edu = Symbol(&#x27;你好&#x27;);</span><br><span class=\"line\">// ‘’ 里面写描述</span><br><span class=\"line\">console.log(hh == edu)</span><br><span class=\"line\">console.log(hh)</span><br><span class=\"line\">console.log(hh.description) // 输出描述</span><br><span class=\"line\">/*</span><br><span class=\"line\">false</span><br><span class=\"line\">Symbol(你好)</span><br><span class=\"line\">你好</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li><p>symbol.for 定义全局注册表,并记录在内存中（运行时的不同部分需要共享和重用符号实例）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let com = Symbol.for(&#x27;hh&#x27;)</span><br><span class=\"line\">    let mmm = Symbol.for(&#x27;hh&#x27;)</span><br><span class=\"line\">    console.log(com == mmm)</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    true</span><br><span class=\"line\">    */</span><br></pre></td></tr></table></figure></li>\n<li><p>symbol.keyFor()查询<strong>全局注册表</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\\\ 全局</span><br><span class=\"line\">let s = symbol.for(&#x27;hh&#x27;)</span><br><span class=\"line\">symbol.keyFor(s)  // hh</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\ 普通</span><br><span class=\"line\">let s = symbol(&#x27;hh&#x27;)</span><br><span class=\"line\">symbol.keyFor(s)  // undefined</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3-解决字符串耦合问题\"><a href=\"#3-解决字符串耦合问题\" class=\"headerlink\" title=\"3. 解决字符串耦合问题\"></a>3. 解决字符串耦合问题</h3><ul>\n<li><p>声明时，key相同，数据不会重复显示</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let hh =&#123;</span><br><span class=\"line\">    song:&#123;js:100 , css :50&#125;,</span><br><span class=\"line\">    song:&#123;js:60 , css:100&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(hh)</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210428092009035.png\" alt=\"image-20210428092009035\"></p>\n</li>\n<li><p>声明时加上symbol</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> let user1 =&#123;</span><br><span class=\"line\">        name:&#x27;song&#x27;,</span><br><span class=\"line\">        key:Symbol(&#x27;song&#x27;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    let user2 =&#123;</span><br><span class=\"line\">        name:&#x27;song&#x27;,</span><br><span class=\"line\">        key:Symbol(&#x27;song&#x27;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">let hh =&#123;</span><br><span class=\"line\">    [user1.key]:&#123;js:100 , css :50&#125;,</span><br><span class=\"line\">    [user2.key]:&#123;js:60 , css:100&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(hh);</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210428092714562.png\" alt=\"image-20210428092714562\"></p>\n</li>\n</ul>\n","categories":["ES6"],"tags":["Symbol"]},{"title":"flex布局在react-native中的运用","url":"/2021/04/29/flex%E5%B8%83%E5%B1%80%E5%9C%A8react-native%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/","content":"<p>flex布局在react-native 移动端的应用</p>\n<span id=\"more\"></span>\n\n<h1 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h1><h3 id=\"1-按比例分区\"><a href=\"#1-按比例分区\" class=\"headerlink\" title=\"1. 按比例分区\"></a>1. 按比例分区</h3><ul>\n<li><p>填满区域(可以用于全屏幕布局场景)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex:1</span><br></pre></td></tr></table></figure></li>\n<li><p>按比例分区</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">css:&#123;</span><br><span class=\"line\">.box1:&#123;</span><br><span class=\"line\">\tflex:3</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">.box2:&#123;</span><br><span class=\"line\">\tflex:5</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">.box3:&#123;</span><br><span class=\"line\">\tflex:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 按照父元素块的大小分割 3:5:3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-flex-direction\"><a href=\"#2-flex-direction\" class=\"headerlink\" title=\"2. flex-direction\"></a>2. flex-direction</h3><ul>\n<li><p>决定布局的主轴 默认值为<strong>竖直轴（column）</strong>方向,<strong>水平轴为row</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flex-direction: row;</span><br><span class=\"line\">flex-direction: column;</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429192009.png\" alt=\"colum\"></p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191936.png\" alt=\"row\"></p>\n</li>\n<li><p><code>justifyContent</code>决定其子元素沿主轴的排列方式</p>\n</li>\n<li><p><code>alignItem</code>决定其子元素沿此轴的排列方式</p>\n</li>\n<li><p>排列方式已主轴默认column为例</p>\n<ul>\n<li><p>flex-start</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191934.png\" alt=\"image-20210429185938115\"></p>\n</li>\n<li><p>flex-end</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191932.png\" alt=\"image-20210429185959461\"></p>\n</li>\n<li><p>center</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191928.png\" alt=\"image-20210429190020934\"></p>\n</li>\n<li><p>space-between</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191927.png\" alt=\"image-20210429190058289\"></p>\n</li>\n<li><p>space-around</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191921.png\" alt=\"image-20210429190215098\"></p>\n</li>\n<li><p>space-evenly</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429191918.png\" alt=\"image-2\"></p>\n</li>\n</ul>\n</li>\n<li><p><code>alignSelf</code>在父级元素下不影响其他子项的情况进行单个的排列方式</p>\n<ul>\n<li><p>stretch</p>\n<p>  <img src=\"https://gitee.com/song-zejian/markdown_image/raw/master/img/20210429192711.png\" alt=\"image-20210429190718573\"></p>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["CSS"],"tags":["react-native"]},{"title":"终身学习","url":"/2021/04/20/%E7%BB%88%E8%BA%AB%E5%AD%A6%E4%B9%A0/","content":"<p> 改变也许艰难，却从未有人说过不值得</p>\n<span id=\"more\"></span>\n\n<h1 id=\"《终身成长》\"><a href=\"#《终身成长》\" class=\"headerlink\" title=\"《终身成长》\"></a>《终身成长》</h1><h6 id=\"成长是一辈子的事儿-，-他无关年纪。\"><a href=\"#成长是一辈子的事儿-，-他无关年纪。\" class=\"headerlink\" title=\"成长是一辈子的事儿 ， 他无关年纪。\"></a>成长是一辈子的事儿 ， 他无关年纪。</h6><h6 id=\"无论何时，停止成长，才是最可怕的衰老\"><a href=\"#无论何时，停止成长，才是最可怕的衰老\" class=\"headerlink\" title=\"无论何时，停止成长，才是最可怕的衰老\"></a>无论何时，停止成长，才是最可怕的衰老</h6><p>从这本书中，收获最大的是</p>\n<h5 id=\"谦逊\"><a href=\"#谦逊\" class=\"headerlink\" title=\"谦逊\"></a>谦逊</h5><p>典型的<strong>固定型思维</strong>的人认为人的才能是一成不变的。在日常的行为举止中，时刻想要证明自己的智力、个性和特征。他们把发生的事情当作衡量能力和价值的直接标尺。</p>\n<p>你有没有中招啊？</p>\n<p>而<strong>成长性思维</strong>的人认为，人的能力是可以努力培养的。虽然人的先天才能、性格、资质都各有偏差，但都可以通过努力来改变。</p>\n<p>我们从几个方面来探讨这两个模式</p>\n<ul>\n<li><p>对自身的客观评价</p>\n<p>  固定思维的人都自视甚高，对自己能力评估非好即坏，不免夸大或模糊</p>\n<p>  成长性思维，用发展的眼光看待自己。相信自己可以培养，更加开放的心态来评估自己的现有水平，因此更准确</p>\n</li>\n<li><p>对失败的看法</p>\n<p>  固定型思维，失败是一种行为，一种身份。因此他们无法正确的看待失败，无法接受失败的自己</p>\n<p>  成长型思维，即便失败的痛苦的，但是不能对自己下定义，他只是需要面临和解决的一个问题。从失败和挫折中收益，让自己变得更强大</p>\n</li>\n</ul>\n<p>成长型思维的人能明确目标，不断优化学习方法，并乐于向同伴学习。也就谓之，不摆架子，谦虚向他人学习，同时对于自己的失败以及成功，可以很好的从中受益，并且让自己好好成长。</p>\n<h3 id=\"如何成为成长型思维的人\"><a href=\"#如何成为成长型思维的人\" class=\"headerlink\" title=\"如何成为成长型思维的人\"></a>如何成为成长型思维的人</h3><ul>\n<li><p><strong>接受</strong> </p>\n<p>  每个人多多少少会有固定型思维，当我们发现时，我们不必感到羞愧，我们首先得承认面对他</p>\n</li>\n<li><p><strong>观察</strong></p>\n<p>  观察你的固定型思维人格，明确他出现的原因。</p>\n</li>\n<li><p><strong>命名</strong></p>\n<p>  给自己固定型思维起个名字，用来警醒自己</p>\n</li>\n<li><p><strong>教育</strong></p>\n<p>  用成长型思维模式与他沟通，教育他。</p>\n</li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>正如作者所说，改变也许艰难，却未有人说过不值得。</p>\n<p>何况，你我都是对自己有要求的人，不是吗？</p>\n<p><strong>参考：</strong>樊登读书《终身成长》 作者：卡罗尔 德韦克</p>\n","categories":["读书笔记"],"tags":["成长型思维"]}]